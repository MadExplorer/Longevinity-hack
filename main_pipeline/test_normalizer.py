# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∞–≥–µ–Ω—Ç–∞-–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å—É—â–Ω–æ—Å—Ç–µ–π
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω–æ–Ω–∏–º–æ–≤
"""

from graph.entity_normalizer import EntityNormalizer

def test_entity_normalizer():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞-–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Å—É—â–Ω–æ—Å—Ç–µ–π —Å –æ—á–µ–≤–∏–¥–Ω—ã–º–∏ —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏
    test_entities = [
        "GLP-1R",
        "GLP1R", 
        "Glucagon-like peptide-1 receptor",
        "RESVERATROL",
        "RSV",
        "resv",
        "NPY",
        "Neuropeptide Y",
        "SIRT1",
        "Sirtuin 1",
        "mTOR",
        "mechanistic target of rapamycin",
        "AMPK",
        "cfChPs",
        "Telomerase"
    ]
    
    print(f"üìã –ò—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫: {len(test_entities)} —Å—É—â–Ω–æ—Å—Ç–µ–π")
    for entity in test_entities:
        print(f"   ‚Ä¢ {entity}")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ç–æ—Ä
    normalizer = EntityNormalizer()
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º
    mapping = normalizer.normalize_entities(test_entities)
    
    print(f"\nü§ñ –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏:")
    for canonical, aliases in mapping.items():
        if len(aliases) > 1:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—ã —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏
            print(f"   üìç {canonical}: {aliases}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏—Ö –∏–º–µ–Ω
    print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏—Ö –∏–º–µ–Ω:")
    test_names = ["GLP1R", "RSV", "Sirtuin 1", "unknown_entity"]
    for name in test_names:
        canonical = normalizer.get_canonical_name(name)
        print(f"   '{name}' -> '{canonical}'")
    
    print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    test_entity_normalizer() 