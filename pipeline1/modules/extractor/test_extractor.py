#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –º–æ–¥—É–ª—è Extractor v2.0
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞—É—á–Ω–æ–π –Ω–∞—Ä—Ä–∞—Ç–∏–≤—ã
"""

import os
import json
from extractor import ScientificNarrativeExtractor
from models import DocumentInput
import dotenv
dotenv.load_dotenv()

def test_extractor():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞."""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    api_key = os.getenv("GEMINI_API_KEY")
    if not api_key:
        print("‚ùå –û—à–∏–±–∫–∞: API –∫–ª—é—á GEMINI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("–ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –Ω–∞: https://makersuite.google.com/app/apikey")
        print("–ó–∞—Ç–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: export GEMINI_API_KEY=your_key_here")
        return False
    
    print(f"‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {api_key[:10]}...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä
        print("üîß –°–æ–∑–¥–∞–µ–º —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä...")
        extractor = ScientificNarrativeExtractor()
        print("‚úÖ –≠–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–æ–≤–∞—è –Ω–∞—É—á–Ω–∞—è —Å—Ç–∞—Ç—å—è
        print("\nüìÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞—É—á–Ω–æ–π –Ω–∞—Ä—Ä–∞—Ç–∏–≤—ã...")
        
        title = "Caloric restriction extends lifespan through autophagy activation"
        abstract = """
        Background: Caloric restriction (CR) is known to extend lifespan in various species.
        Hypothesis: We hypothesized that CR extends lifespan through activation of autophagy pathways.
        Methods: We used C57BL/6 mice divided into control and CR groups (70% caloric intake). 
        Autophagy was measured using LC3 immunostaining and Western blot analysis.
        Results: CR mice showed 25% increase in lifespan (p<0.001). LC3-II levels increased 3-fold.
        Conclusions: Our data demonstrate that caloric restriction extends lifespan through enhanced autophagy.
        """
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        result = extractor.process_single_document(
            title=title,
            abstract=abstract,
            source_id="test_001"
        )
        
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        print(f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π: {len(result.scientific_narrative)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if result.scientific_narrative:
            print("\nüî¨ –ò–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è –Ω–∞—É—á–Ω–∞—è –Ω–∞—Ä—Ä–∞—Ç–∏–≤–∞:")
            for i, statement in enumerate(result.scientific_narrative, 1):
                print(f"\n{i}. –¢–∏–ø: {statement.statement_type}")
                print(f"   –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {statement.statement_content}")
                
                if statement.knowledge_triples:
                    print("   üìù Knowledge Triples:")
                    for triple in statement.knowledge_triples:
                        print(f"     ‚Ä¢ {triple.subject} ‚Üí {triple.predicate} ‚Üí {triple.object}")
        else:
            print("‚ö†Ô∏è  –ù–∞—Ä—Ä–∞—Ç–∏–≤–∞ –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω–∞ - –≤–æ–∑–º–æ–∂–Ω–æ –º–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False

def test_models():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Pydantic –º–æ–¥–µ–ª–∏."""
    print("\nüß© –¢–µ—Å—Ç–∏—Ä—É–µ–º Pydantic –º–æ–¥–µ–ª–∏...")
    
    try:
        from models import KnowledgeTriple, ScientificStatement, ExtractedNarrative
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã
        triple = KnowledgeTriple(
            subject="caloric restriction",
            predicate="extends",
            object="lifespan"
        )
        
        statement = ScientificStatement(
            statement_type="Result",
            statement_content="CR mice showed 25% increase in lifespan",
            knowledge_triples=[triple]
        )
        
        narrative = ExtractedNarrative(
            scientific_narrative=[statement]
        )
        
        print(f"‚úÖ –ú–æ–¥–µ–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print(f"üìÑ –ü—Ä–∏–º–µ—Ä —Ç—Ä–æ–π–∫–∏: {triple.subject} ‚Üí {triple.predicate} ‚Üí {triple.object}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–¥–µ–ª—è—Ö: {e}")
        return False

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã."""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ú–æ–¥—É–ª—è 2 - Extractor v2.0")
    print("=" * 50)
    
    # –¢–µ—Å—Ç –º–æ–¥–µ–ª–µ–π
    models_ok = test_models()
    
    if models_ok:
        # –¢–µ—Å—Ç —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞
        extractor_ok = test_extractor()
        
        if extractor_ok:
            print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
            print("–ú–æ–¥—É–ª—å Extractor v2.0 –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        else:
            print("\nüí• –¢–µ—Å—Ç—ã —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
    else:
        print("\nüí• –¢–µ—Å—Ç—ã –º–æ–¥–µ–ª–µ–π –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")

if __name__ == "__main__":
    main() 