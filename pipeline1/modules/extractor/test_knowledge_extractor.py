#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ú–æ–¥—É–ª—è 2: Knowledge Extractor
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π –∏–∑ –Ω–∞—É—á–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
"""

import os
import json
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))
from models import InputDocument, ExtractedDocument
from extractor import KnowledgeExtractor
from config.config import ExtractorConfig


def test_models():
    """–¢–µ—Å—Ç Pydantic –º–æ–¥–µ–ª–µ–π."""
    print("üß© –¢–µ—Å—Ç–∏—Ä—É—é Pydantic –º–æ–¥–µ–ª–∏...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≤—Ö–æ–¥–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç
        input_doc = InputDocument(
            source_id="test_001",
            source_url="https://example.com/paper",
            title="SIRT1 activation by resveratrol extends lifespan in mice",
            abstract="We investigated the effects of resveratrol on SIRT1 activity and longevity in mice. Resveratrol treatment increased SIRT1 expression, leading to enhanced autophagy and a 20% increase in median lifespan.",
            content=None
        )
        
        print(f"‚úÖ –í—Ö–æ–¥–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {input_doc.source_id}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å—Ö–µ–º—ã
        json_data = {
            "source_id": "test_001",
            "source_url": "https://example.com/paper",
            "classification": {
                "research_area": "longevity_interventions",
                "maturity_level": "basic_research"
            },
            "knowledge_graph": {
                "entities": [
                    {"name": "SIRT1", "type": "Gene/Protein"},
                    {"name": "resveratrol", "type": "Chemical/Drug"}
                ],
                "relationships": [
                    {"subject": "resveratrol", "predicate": "–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç", "object": "SIRT1"}
                ]
            }
        }
        
        extracted_doc = ExtractedDocument(**json_data)
        print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –≤–∞–ª–∏–¥–µ–Ω: {len(extracted_doc.knowledge_graph.entities)} —Å—É—â–Ω–æ—Å—Ç–µ–π")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–¥–µ–ª—è—Ö: {e}")
        return False


def test_extractor():
    """–¢–µ—Å—Ç —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞ –∑–Ω–∞–Ω–∏–π."""
    print("\nüî¨ –¢–µ—Å—Ç–∏—Ä—É—é Knowledge Extractor...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    api_key = os.getenv("OPENAI_API_KEY") or os.getenv("GEMINI_API_KEY")
    if not api_key:
        print("‚ö†Ô∏è  API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç LLM")
        return True
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä
        extractor = KnowledgeExtractor()
        print("‚úÖ –≠–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        test_doc = InputDocument(
            source_id="test_longevity_001",
            source_url=None,
            title="Caloric restriction activates SIRT1 and extends lifespan",
            abstract="Background: Caloric restriction (CR) is known to extend lifespan. We hypothesized that CR works through SIRT1 activation. Methods: We used C57BL/6 mice on 70% caloric intake. Results: CR mice showed 25% increased lifespan and elevated SIRT1 activity. Conclusions: CR extends lifespan via SIRT1 pathway.",
            content=None
        )
        
        print("üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç...")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞–Ω–∏—è
        result = extractor.extract_knowledge(test_doc)
        
        if result:
            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞!")
            print(f"  üìä –û–±–ª–∞—Å—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {result.classification.research_area}")
            print(f"  üéØ –£—Ä–æ–≤–µ–Ω—å –∑—Ä–µ–ª–æ—Å—Ç–∏: {result.classification.maturity_level}")
            print(f"  üîó –°—É—â–Ω–æ—Å—Ç–µ–π: {len(result.knowledge_graph.entities)}")
            print(f"  ‚ÜîÔ∏è  –û—Ç–Ω–æ—à–µ–Ω–∏–π: {len(result.knowledge_graph.relationships)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
            if result.knowledge_graph.entities:
                print("  üß¨ –ü—Ä–∏–º–µ—Ä—ã —Å—É—â–Ω–æ—Å—Ç–µ–π:")
                for entity in result.knowledge_graph.entities[:3]:
                    print(f"    ‚Ä¢ {entity.name} ({entity.type})")
            
            if result.knowledge_graph.relationships:
                print("  üîÑ –ü—Ä–∏–º–µ—Ä—ã –æ—Ç–Ω–æ—à–µ–Ω–∏–π:")
                for rel in result.knowledge_graph.relationships[:3]:
                    print(f"    ‚Ä¢ {rel.subject} ‚Üí {rel.predicate} ‚Üí {rel.object}")
            
            return True
        else:
            print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–µ: {e}")
        return False


def test_cache():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("\nüíæ –¢–µ—Å—Ç–∏—Ä—É—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    
    try:
        config = ExtractorConfig()
        print(f"üìÅ –ü–∞–ø–∫–∞ –∫—ç—à–∞: {config.cache_dir}")
        print(f"üîß –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ: {'–≤–∫–ª—é—á–µ–Ω–æ' if config.cache_enabled else '–æ—Ç–∫–ª—é—á–µ–Ω–æ'}")
        
        if config.cache_dir.exists():
            cache_files = list(config.cache_dir.glob("*.json"))
            print(f"üìÑ –§–∞–π–ª–æ–≤ –≤ –∫—ç—à–µ: {len(cache_files)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫—ç—à–∞: {e}")
        return False


def test_prompt_loading():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–∞."""
    print("\nüìã –¢–µ—Å—Ç–∏—Ä—É—é –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ–º–ø—Ç–∞...")
    
    try:
        config = ExtractorConfig()
        
        if config.prompt_file.exists():
            with open(config.prompt_file, 'r', encoding='utf-8') as f:
                prompt = f.read()
            print(f"‚úÖ –ü—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞
            sections = ["–ó–ê–î–ê–ß–ê:", "–ö–û–ù–¢–ï–ö–°–¢:", "–§–û–†–ú–ê–¢ –í–´–í–û–î–ê:"]
            found_sections = []
            for section in sections:
                if section in prompt:
                    found_sections.append(section)
            
            print(f"üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–µ–∫—Ü–∏–∏: {', '.join(found_sections)}")
            return True
        else:
            print(f"‚ö†Ô∏è  –§–∞–π–ª –ø—Ä–æ–º–ø—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config.prompt_file}")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–∞: {e}")
        return False


def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
    print("üß™ –ó–∞–ø—É—Å–∫–∞—é –≤—Å–µ —Ç–µ—Å—Ç—ã Knowledge Extractor...")
    print("=" * 60)
    
    tests = [
        ("–ú–æ–¥–µ–ª–∏", test_models),
        ("–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ", test_cache),
        ("–ü—Ä–æ–º–ø—Ç", test_prompt_loading),
        ("–≠–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä", test_extractor),
    ]
    
    results = []
    for name, test_func in tests:
        print(f"\nüîç –¢–µ—Å—Ç: {name}")
        print("-" * 40)
        result = test_func()
        results.append((name, result))
        print(f"{'‚úÖ –ü–†–û–ô–î–ï–ù' if result else '‚ùå –ü–†–û–í–ê–õ–ï–ù'}")
    
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {name}: {status}")
    
    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
    
    return passed == total


if __name__ == "__main__":
    success = run_all_tests()
    exit(0 if success else 1) 