"""
Paper Evaluator - –æ—Ü–µ–Ω—â–∏–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –Ω–∞—É—á–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
"""

import json
import logging
from typing import List, Dict, Any
from openai import OpenAI
from concurrent.futures import ThreadPoolExecutor, as_completed
import math

from .models import Paper, RankedPaper
from .config import (
    OPENAI_API_KEY,
    OPENAI_BASE_URL,
    OPENAI_MODEL,
    OPENAI_TEMPERATURE,
    PAPER_EVALUATOR_PROMPT,
    LLM_REQUEST_TIMEOUT,
    MIN_SCORE_THRESHOLD
)


logger = logging.getLogger(__name__)


class PaperEvaluator:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –Ω–∞—É—á–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π"""
    
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Gemini API
        client_kwargs = {"api_key": OPENAI_API_KEY}
        if OPENAI_BASE_URL:
            client_kwargs["base_url"] = OPENAI_BASE_URL
        
        self.client = OpenAI(**client_kwargs)
        self.prompt_template = self._load_prompt()
    
    def _load_prompt(self) -> str:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(PAPER_EVALUATOR_PROMPT, 'r', encoding='utf-8') as f:
                return f.read()
        except FileNotFoundError:
            logger.error(f"–§–∞–π–ª –ø—Ä–æ–º–ø—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {PAPER_EVALUATOR_PROMPT}")
            return ""
    
    def evaluate_paper(self, paper: Paper, research_topic: str) -> RankedPaper:
        """
        –û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å–∏ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ç–µ–º—ã
        
        Args:
            paper: –û–±—ä–µ–∫—Ç —Å—Ç–∞—Ç—å–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
            research_topic: –¢–µ–º–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
            
        Returns:
            –û–±—ä–µ–∫—Ç RankedPaper —Å –æ—Ü–µ–Ω–∫–æ–π
        """
        logger.debug(f"–û—Ü–µ–Ω–∫–∞ —Å—Ç–∞—Ç—å–∏: {paper.title[:50]}...")
        
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
            prompt = self.prompt_template.format(
                research_topic=research_topic,
                title=paper.title,
                authors=", ".join(paper.authors),
                published_date=paper.published_date,
                summary=paper.summary
            )
            
            # –í—ã–∑—ã–≤–∞–µ–º LLM –¥–ª—è –æ—Ü–µ–Ω–∫–∏
            response = self.client.chat.completions.create(
                model=OPENAI_MODEL,
                messages=[{"role": "user", "content": prompt}],
                temperature=OPENAI_TEMPERATURE,
                timeout=LLM_REQUEST_TIMEOUT
            )
            
            content = response.choices[0].message.content
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
            evaluation = self._extract_json_from_response(content)
            
            # –°–æ–∑–¥–∞–µ–º RankedPaper –æ–±—ä–µ–∫—Ç
            ranked_paper = RankedPaper(
                **paper.dict(),
                score=float(evaluation.get('score', 0)),
                justification=evaluation.get('justification', 'No justification provided')
            )
            
            logger.debug(f"–û—Ü–µ–Ω–∫–∞: {ranked_paper.score}")
            return ranked_paper
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ —Å—Ç–∞—Ç—å–∏ {paper.id}: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—å—é —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–æ–π –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return RankedPaper(
                **paper.dict(),
                score=0.0,
                justification=f"Error during evaluation: {str(e)}"
            )
    
    def evaluate_papers(self, papers: List[Paper], research_topic: str) -> List[RankedPaper]:
        """
        –û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π –æ–¥–Ω–∏–º –≤—ã–∑–æ–≤–æ–º –∫ LLM
        
        Args:
            papers: –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π –¥–ª—è –æ—Ü–µ–Ω–∫–∏
            research_topic: –¢–µ–º–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
            
        Returns:
            –°–ø–∏—Å–æ–∫ –æ—Ü–µ–Ω–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ —É–±—ã–≤–∞–Ω–∏—é –æ—Ü–µ–Ω–∫–∏
        """
        logger.info(f"–ú–∞—Å—Å–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ {len(papers)} —Å—Ç–∞—Ç–µ–π")
        
        if not papers:
            return []
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ç—å–∏ –≤ JSON –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
        papers_data = []
        for paper in papers:
            papers_data.append({
                "title": paper.title,
                "abstract": paper.summary,
                "authors": paper.authors,
                "published_date": paper.published_date
            })
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ–º replace –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å JSON)
        papers_json = json.dumps(papers_data, ensure_ascii=False, indent=2)
        full_prompt = self.prompt_template.replace(
            "{research_topic}", research_topic
        ).replace(
            "{papers_data}", papers_json
        )
        
        logger.debug(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {full_prompt[:200]}...")
        
        # –í—ã–∑—ã–≤–∞–µ–º LLM
        response = self.client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[{"role": "user", "content": full_prompt}],
            temperature=OPENAI_TEMPERATURE,
            timeout=LLM_REQUEST_TIMEOUT
        )
        
        content = response.choices[0].message.content
        logger.debug(f"–û—Ç–≤–µ—Ç LLM: {content[:200]}...")
        
        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
        evaluation_results = self._extract_ranking_from_response(content)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ RankedPaper –æ–±—ä–µ–∫—Ç—ã
        ranked_papers = []
        
        for eval_result in evaluation_results:
            # –ù–∞—Ö–æ–¥–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç—å—é –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            original_paper = None
            for paper in papers:
                if paper.title == eval_result.get('title', ''):
                    original_paper = paper
                    break
            
            if original_paper:
                ranked_paper = RankedPaper(
                    id=original_paper.id,
                    title=original_paper.title,
                    authors=original_paper.authors,
                    published_date=original_paper.published_date,
                    summary=original_paper.summary,
                    url=original_paper.url,
                    score=eval_result.get('score', 1.0),
                    justification=eval_result.get('justification', 'No justification provided'),
                    rank=eval_result.get('rank', len(ranked_papers) + 1)
                )
                ranked_papers.append(ranked_paper)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—å–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö (—Å –Ω–∏–∑–∫–æ–π –æ—Ü–µ–Ω–∫–æ–π)
        evaluated_titles = {result.get('title', '') for result in evaluation_results}
        for paper in papers:
            if paper.title not in evaluated_titles:
                logger.warning(f"–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –æ—Ü–µ–Ω–∫–∏: {paper.title[:50]}...")
                ranked_paper = RankedPaper(
                    id=paper.id,
                    title=paper.title,
                    authors=paper.authors,
                    published_date=paper.published_date,
                    summary=paper.summary,
                    url=paper.url,
                    score=1.0,
                    justification="–°—Ç–∞—Ç—å—è –Ω–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–æ–π –æ—Ü–µ–Ω–∫–∏",
                    rank=len(ranked_papers) + 1
                )
                ranked_papers.append(ranked_paper)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –æ—Ü–µ–Ω–∫–∏
        ranked_papers.sort(key=lambda x: x.score, reverse=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–Ω–≥–∏ –ø–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        for rank, paper in enumerate(ranked_papers, 1):
            paper.rank = rank
        
        logger.info(f"–ú–∞—Å—Å–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –¢–æ–ø –æ—Ü–µ–Ω–∫–∞: {ranked_papers[0].score if ranked_papers else 0}")
        
        return ranked_papers
    
    def filter_validated_papers(self, ranked_papers: List[RankedPaper]) -> List[RankedPaper]:
        """
        –§–∏–ª—å—Ç—Ä—É–µ—Ç —Å—Ç–∞—Ç—å–∏ –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –ø–æ—Ä–æ–≥—É –æ—Ü–µ–Ω–∫–∏
        
        Args:
            ranked_papers: –°–ø–∏—Å–æ–∫ –æ—Ü–µ–Ω–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
            
        Returns:
            –°–ø–∏—Å–æ–∫ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π (score >= threshold)
        """
        validated = [p for p in ranked_papers if p.score >= MIN_SCORE_THRESHOLD]
        
        logger.info(f"–í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–æ {len(validated)} —Å—Ç–∞—Ç–µ–π –∏–∑ {len(ranked_papers)} (–ø–æ—Ä–æ–≥: {MIN_SCORE_THRESHOLD})")
        
        return validated
    
    def evaluate_papers_parallel(self, papers: List[Paper], research_topic: str, batch_size: int = 10, max_workers: int = 3) -> List[RankedPaper]:
        """
        –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç–∞—Ç–µ–π —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –Ω–∞ –±–∞—Ç—á–∏
        
        Args:
            papers: –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π –¥–ª—è –æ—Ü–µ–Ω–∫–∏
            research_topic: –¢–µ–º–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
            batch_size: –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ LLM –≤—ã–∑–æ–≤–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 5-15)
            max_workers: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
            
        Returns:
            –°–ø–∏—Å–æ–∫ –æ—Ü–µ–Ω–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ —É–±—ã–≤–∞–Ω–∏—é –æ—Ü–µ–Ω–∫–∏
        """
        logger.info(f"üöÄ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ {len(papers)} —Å—Ç–∞—Ç–µ–π (–±–∞—Ç—á–∏ –ø–æ {batch_size}, {max_workers} –ø–æ—Ç–æ–∫–æ–≤)")
        
        if not papers:
            return []
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç–∞—Ç—å–∏ –Ω–∞ –±–∞—Ç—á–∏
        batches = []
        for i in range(0, len(papers), batch_size):
            batch = papers[i:i + batch_size]
            batches.append((i // batch_size + 1, batch))
        
        logger.info(f"üì¶ –†–∞–∑–±–∏—Ç–æ –Ω–∞ {len(batches)} –±–∞—Ç—á–µ–π")
        
        all_ranked_papers = []
        
        def evaluate_batch(batch_info: tuple) -> List[RankedPaper]:
            """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –æ–¥–∏–Ω –±–∞—Ç—á —Å—Ç–∞—Ç–µ–π"""
            batch_num, batch_papers = batch_info
            
            try:
                logger.info(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ {batch_num}/{len(batches)} ({len(batch_papers)} —Å—Ç–∞—Ç–µ–π)...")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –±–∞—Ç—á–∞
                ranked_papers = self.evaluate_papers(batch_papers, research_topic)
                
                logger.info(f"‚úÖ –ë–∞—Ç—á {batch_num} –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –õ—É—á—à–∞—è –æ—Ü–µ–Ω–∫–∞: {ranked_papers[0].score if ranked_papers else 0}")
                return ranked_papers
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–∞—Ç—á–µ {batch_num}: {e}")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—å–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                return [
                    RankedPaper(
                        id=paper.id,
                        title=paper.title,
                        authors=paper.authors,
                        published_date=paper.published_date,
                        summary=paper.summary,
                        url=paper.url,
                        score=1.0,
                        justification=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)[:100]}",
                        rank=999
                    ) for paper in batch_papers
                ]
        
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–µ–π
        with ThreadPoolExecutor(max_workers=max_workers) as executor:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –±–∞—Ç—á–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
            future_to_batch = {
                executor.submit(evaluate_batch, batch_info): batch_info[0] 
                for batch_info in batches
            }
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–µ—Ä–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            for future in as_completed(future_to_batch):
                batch_num = future_to_batch[future]
                try:
                    ranked_papers = future.result()
                    all_ranked_papers.extend(ranked_papers)
                except Exception as e:
                    logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –±–∞—Ç—á–µ {batch_num}: {e}")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤—Å–µ—Ö —Å—Ç–∞—Ç–µ–π
        all_ranked_papers.sort(key=lambda x: x.score, reverse=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–Ω–≥–∏ –ø–æ—Å–ª–µ –æ–±—â–µ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        for rank, paper in enumerate(all_ranked_papers, 1):
            paper.rank = rank
        
        logger.info(f"üéØ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(all_ranked_papers)} —Å—Ç–∞—Ç–µ–π. –¢–æ–ø –æ—Ü–µ–Ω–∫–∞: {all_ranked_papers[0].score if all_ranked_papers else 0}")
        
        return all_ranked_papers
    
    def _extract_ranking_from_response(self, content: str) -> List[Dict[str, Any]]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –∏–∑ –æ—Ç–≤–µ—Ç–∞ LLM
        
        Args:
            content: –û—Ç–≤–µ—Ç –æ—Ç LLM —Å –º–∞—Å—Å–∏–≤–æ–º —Å—Ç–∞—Ç–µ–π
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å—Ç–∞—Ç—å—è–º–∏
        """
        logger.debug(f"üîß –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –º–∞—Å—Å–∏–≤–∞ —Å—Ç–∞—Ç–µ–π –∏–∑ –æ—Ç–≤–µ—Ç–∞...")
        
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ 1: –ù–∞–π—Ç–∏ JSON –±–ª–æ–∫ –≤ markdown
            if '```json' in content:
                logger.debug("üìã –ù–∞–π–¥–µ–Ω JSON –±–ª–æ–∫ –≤ markdown")
                start_idx = content.find('```json') + 7
                end_idx = content.find('```', start_idx)
                if end_idx != -1:
                    json_str = content[start_idx:end_idx].strip()
                    logger.debug(f"JSON —Å—Ç—Ä–æ–∫–∞ –∏–∑ markdown: {repr(json_str[:200])}")
                    result = json.loads(json_str)
                    if isinstance(result, list):
                        logger.debug(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω –º–∞—Å—Å–∏–≤ –∏–∑ {len(result)} —Å—Ç–∞—Ç–µ–π")
                        return result
            
            # –ü–æ–ø—ã—Ç–∫–∞ 2: –ù–∞–π—Ç–∏ JSON –º–∞—Å—Å–∏–≤ –±–µ–∑ markdown  
            logger.debug("üîç –ò—â–µ–º JSON –º–∞—Å—Å–∏–≤ –±–µ–∑ markdown")
            start_idx = content.find('[')
            end_idx = content.rfind(']') + 1
            if start_idx != -1 and end_idx > start_idx:
                json_str = content[start_idx:end_idx]
                logger.debug(f"JSON —Å—Ç—Ä–æ–∫–∞ –±–µ–∑ markdown: {repr(json_str[:200])}")
                result = json.loads(json_str)
                if isinstance(result, list):
                    logger.debug(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω –º–∞—Å—Å–∏–≤ –∏–∑ {len(result)} —Å—Ç–∞—Ç–µ–π")
                    return result
            
            # –ü–æ–ø—ã—Ç–∫–∞ 3: –ü–∞—Ä—Å–∏—Ç—å –≤–µ—Å—å –æ—Ç–≤–µ—Ç –∫–∞–∫ JSON
            logger.debug("üìÑ –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –≤–µ—Å—å –æ—Ç–≤–µ—Ç –∫–∞–∫ JSON")
            stripped_content = content.strip()
            result = json.loads(stripped_content)
            if isinstance(result, list):
                logger.debug(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω –≤–µ—Å—å –æ—Ç–≤–µ—Ç –∫–∞–∫ –º–∞—Å—Å–∏–≤ –∏–∑ {len(result)} —Å—Ç–∞—Ç–µ–π")
                return result
                
        except json.JSONDecodeError as e:
            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –º–∞—Å—Å–∏–≤–∞: {e}")
            logger.debug(f"–ü—Ä–æ–±–ª–µ–º–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {repr(content[:500])}")
            
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –º–∞—Å—Å–∏–≤ —Å—Ç–∞—Ç–µ–π: {e}")
            
        # Fallback: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        logger.warning("–ò—Å–ø–æ–ª—å–∑—É–µ–º fallback: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
        return []

    def _extract_json_from_response(self, content: str) -> dict:
        """
        –ù–∞–¥–µ–∂–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ LLM
        
        Args:
            content: –û—Ç–≤–µ—Ç –æ—Ç LLM
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –æ—Ü–µ–Ω–∫–æ–π –∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º
        """
        logger.debug(f"üîß –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞...")
        logger.debug(f"–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {type(content)}")
        logger.debug(f"–ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤: {repr(content[:100])}")
        
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ 1: –ù–∞–π—Ç–∏ JSON –±–ª–æ–∫ –≤ markdown
            if '```json' in content:
                logger.debug("üìã –ù–∞–π–¥–µ–Ω JSON –±–ª–æ–∫ –≤ markdown")
                start_idx = content.find('```json') + 7
                end_idx = content.find('```', start_idx)
                if end_idx != -1:
                    json_str = content[start_idx:end_idx].strip()
                    logger.debug(f"JSON —Å—Ç—Ä–æ–∫–∞ –∏–∑ markdown: {repr(json_str)}")
                    result = json.loads(json_str)
                    logger.debug(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω JSON –∏–∑ markdown: {result}")
                    return result
            
            # –ü–æ–ø—ã—Ç–∫–∞ 2: –ù–∞–π—Ç–∏ JSON –±–ª–æ–∫ –±–µ–∑ markdown  
            logger.debug("üîç –ò—â–µ–º JSON –±–ª–æ–∫ –±–µ–∑ markdown")
            start_idx = content.find('{')
            end_idx = content.rfind('}') + 1
            if start_idx != -1 and end_idx > start_idx:
                json_str = content[start_idx:end_idx]
                logger.debug(f"JSON —Å—Ç—Ä–æ–∫–∞ –±–µ–∑ markdown: {repr(json_str)}")
                result = json.loads(json_str)
                logger.debug(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω JSON –±–µ–∑ markdown: {result}")
                return result
            
            # –ü–æ–ø—ã—Ç–∫–∞ 3: –ü–∞—Ä—Å–∏—Ç—å –≤–µ—Å—å –æ—Ç–≤–µ—Ç –∫–∞–∫ JSON
            logger.debug("üìÑ –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –≤–µ—Å—å –æ—Ç–≤–µ—Ç –∫–∞–∫ JSON")
            stripped_content = content.strip()
            logger.debug(f"–û—á–∏—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {repr(stripped_content)}")
            result = json.loads(stripped_content)
            logger.debug(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω –≤–µ—Å—å –æ—Ç–≤–µ—Ç –∫–∞–∫ JSON: {result}")
            return result
            
        except json.JSONDecodeError as e:
            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            logger.debug(f"–ü—Ä–æ–±–ª–µ–º–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {repr(content)}")
            
            # –ü–æ–ø—ã—Ç–∫–∞ 4: –ò–∑–≤–ª–µ—á—å –æ—Ü–µ–Ω–∫—É –∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
            logger.debug("üõ†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –ø–∞—Ä—Å–∏–Ω–≥ —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏")
            import re
            
            score_match = re.search(r'"?score"?\s*:\s*(\d+(?:\.\d+)?)', content, re.IGNORECASE)
            just_match = re.search(r'"?justification"?\s*:\s*"([^"]*)"', content, re.IGNORECASE)
            
            score = float(score_match.group(1)) if score_match else 5.0
            justification = just_match.group(1) if just_match else "Could not parse justification from response"
            
            logger.warning(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback –ø–∞—Ä—Å–∏–Ω–≥. Score: {score}, Justification: {justification[:50]}...")
            
            return {
                "score": score,
                "justification": justification
            }
        
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON: {e}")
            return {
                "score": 1.0,
                "justification": f"Error parsing response: {str(e)}"
            } 