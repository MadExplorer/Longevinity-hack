#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã AI Research Analyst
"""

import logging
import time
from typing import List

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π —Å–∏—Å—Ç–µ–º—ã
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
current_dir = os.path.dirname(os.path.abspath(__file__))
backend_dir = os.path.dirname(os.path.dirname(current_dir))
sys.path.insert(0, backend_dir)

from modules.ai_research_analyst.arxiv_harvester import ArxivHarvester
from modules.ai_research_analyst.query_strategist import QueryStrategist  
from modules.ai_research_analyst.paper_evaluator import PaperEvaluator
from modules.ai_research_analyst.models import Paper

def test_parallel_search():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π"""
    logger.info("üß™ –¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π")
    
    harvester = ArxivHarvester()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    test_queries = [
        "knowledge distillation",
        "small language models",
        "reasoning abilities",
        "chain of thought"
    ]
    
    logger.info(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ {len(test_queries)} –∑–∞–ø—Ä–æ—Å–∞—Ö: {test_queries}")
    
    # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
    start_time = time.time()
    sequential_results = {}
    for query in test_queries:
        papers = harvester.search_papers(query, max_results=5)
        sequential_results[query] = papers
        logger.info(f"–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ: '{query}' -> {len(papers)} —Å—Ç–∞—Ç–µ–π")
    sequential_time = time.time() - start_time
    
    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
    start_time = time.time()
    parallel_results = harvester.search_papers_parallel(test_queries, max_results=5, max_workers=3)
    parallel_time = time.time() - start_time
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    logger.info(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:")
    logger.info(f"‚è±Ô∏è –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {sequential_time:.2f}s")
    logger.info(f"‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {parallel_time:.2f}s")
    logger.info(f"üöÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {sequential_time/parallel_time:.2f}x")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç
    total_sequential = sum(len(papers) for papers in sequential_results.values())
    total_parallel = sum(len(papers) for papers in parallel_results.values())
    
    logger.info(f"üìà –°—Ç–∞—Ç–µ–π –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ: {total_sequential}")
    logger.info(f"üìà –°—Ç–∞—Ç–µ–π –Ω–∞–π–¥–µ–Ω–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ: {total_parallel}")
    
    if abs(total_sequential - total_parallel) <= 1:  # –ù–µ–±–æ–ª—å—à–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –¥–æ–ø—É—Å—Ç–∏–º–∞
        logger.info("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç!")
        return True
    else:
        logger.error("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!")
        return False

def test_parallel_evaluation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É —Å—Ç–∞—Ç–µ–π"""
    logger.info("\nüß™ –¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ —Å—Ç–∞—Ç–µ–π")
    
    evaluator = PaperEvaluator()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏
    test_papers = []
    for i in range(25):  # –°–æ–∑–¥–∞–µ–º 25 —Å—Ç–∞—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        paper = Paper(
            id=f"test_paper_{i}",
            published_date="2024-01-01",
            title=f"Test Paper {i}: AI and Machine Learning Research",
            summary=f"This is a test paper about AI research, specifically focusing on topic {i}. It demonstrates various machine learning techniques and methodologies.",
            authors=[f"Author {i}", f"Co-Author {i}"],
            url=f"https://arxiv.org/abs/test{i}"
        )
        test_papers.append(paper)
    
    research_topic = "AI research methodologies and machine learning techniques"
    
    logger.info(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ {len(test_papers)} —Å—Ç–∞—Ç—å—è—Ö")
    
    try:
        # –û–±—ã—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ (—Ç–æ–ª—å–∫–æ 5 —Å—Ç–∞—Ç–µ–π —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–µ–µ)
        start_time = time.time()
        normal_results = evaluator.evaluate_papers(test_papers[:5], research_topic)
        normal_time = time.time() - start_time
        
        logger.info(f"‚úÖ –û–±—ã—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ: {len(normal_results)} —Å—Ç–∞—Ç–µ–π –∑–∞ {normal_time:.2f}s")
        
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        start_time = time.time()
        parallel_results = evaluator.evaluate_papers_parallel(test_papers, research_topic, batch_size=8, max_workers=3)
        parallel_time = time.time() - start_time
        
        logger.info(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ü–µ–Ω–∫–∏:")
        logger.info(f"‚è±Ô∏è –û–±—ã—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ (5 —Å—Ç–∞—Ç–µ–π): {normal_time:.2f}s")
        logger.info(f"‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ (25 —Å—Ç–∞—Ç–µ–π): {parallel_time:.2f}s")
        logger.info(f"üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç–∞—Ç–µ–π: {len(parallel_results)}")
        
        if len(parallel_results) == len(test_papers):
            logger.info("‚úÖ –í—Å–µ —Å—Ç–∞—Ç—å–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
            return True
        else:
            logger.error(f"‚ùå –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(parallel_results)} –∏–∑ {len(test_papers)} —Å—Ç–∞—Ç–µ–π")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ—Ü–µ–Ω–∫–∏: {e}")
        import traceback
        logger.error(f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {traceback.format_exc()}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã AI Research Analyst")
    
    success = True
    
    try:
        # –¢–µ—Å—Ç 1: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
        if not test_parallel_search():
            success = False
            
        # –¢–µ—Å—Ç 2: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        if not test_parallel_evaluation():
            success = False
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        success = False
    
    if success:
        logger.info("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        logger.info("‚úÖ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        logger.error("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
        logger.error("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ª–∞–¥–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
    
    return success

if __name__ == "__main__":
    main() 