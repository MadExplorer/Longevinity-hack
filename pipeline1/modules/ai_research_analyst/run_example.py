#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞ AI Research Analyst

–≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ.
"""

import os
import sys
import logging
from pathlib import Path
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent.parent.parent))

from modules.ai_research_analyst.orchestrator import ResearchOrchestrator


def main():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI Research Analyst"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
    api_provider = os.getenv('API_PROVIDER', 'gemini').lower()
    
    if api_provider == 'gemini':
        if not os.getenv('GEMINI_API_KEY'):
            print("‚ùå –û—à–∏–±–∫–∞: GEMINI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à Gemini API –∫–ª—é—á")
            print("üí° –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á: https://makersuite.google.com/app/apikey")
            return
    else:
        if not os.getenv('OPENAI_API_KEY'):
            print("‚ùå –û—à–∏–±–∫–∞: OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à OpenAI API –∫–ª—é—á")
            return
    
    # –ü—Ä–∏–º–µ—Ä —Ç–µ–º –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    research_topics = [
        "—Å–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å–µ—Ä—á–∞",
        "automated scientific literature review",
        "AI agents for research assistance",
        "machine learning research evaluation methods"
    ]
    
    print("ü§ñ AI Research Analyst - –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
    print("=" * 60)
    
    # –í—ã–±–æ—Ä —Ç–µ–º—ã
    print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:")
    for i, topic in enumerate(research_topics, 1):
        print(f"{i}. {topic}")
    
    try:
        choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É (1-{len(research_topics)}) –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é: ")
        
        if choice.isdigit():
            idx = int(choice) - 1
            if 0 <= idx < len(research_topics):
                selected_topic = research_topics[idx]
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
                return
        else:
            selected_topic = choice.strip()
            if not selected_topic:
                print("‚ùå –¢–µ–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π")
                return
        
        print(f"\nüìù –í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–µ–º–∞: {selected_topic}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        target_count = 5  # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        
        print(f"üéØ –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π: {target_count}")
        print("\n" + "="*60)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        orchestrator = ResearchOrchestrator()
        
        print("üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞...")
        report = orchestrator.run_research_pipeline(selected_topic, target_count)
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\n" + "="*60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê")
        print("="*60)
        print(report)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
        output_file = f"research_report_{selected_topic[:30].replace(' ', '_')}.md"
        try:
            with open(output_file, 'w', encoding='utf-8') as f:
                f.write(report)
            print(f"\n‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {output_file}")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç: {e}")
        
        print("\n‚ú® –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        logging.exception("–û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–µ –∑–∞–ø—É—Å–∫–∞")


if __name__ == "__main__":
    main() 