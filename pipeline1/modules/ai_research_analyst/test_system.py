"""
–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã AI Research Analyst
"""

import os
import sys
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent.parent.parent))

from modules.ai_research_analyst.query_strategist import QueryStrategist
from modules.ai_research_analyst.arxiv_harvester import ArxivHarvester
from modules.ai_research_analyst.paper_evaluator import PaperEvaluator
from modules.ai_research_analyst.final_synthesizer import FinalSynthesizer
from modules.ai_research_analyst.orchestrator import ResearchOrchestrator


def test_query_strategist():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Query Strategist...")
    
    api_provider = os.getenv('API_PROVIDER', 'gemini').lower()
    api_key = os.getenv('GEMINI_API_KEY') if api_provider == 'gemini' else os.getenv('OPENAI_API_KEY')
    
    if not api_key:
        print(f"‚ö†Ô∏è API –∫–ª—é—á –¥–ª—è {api_provider} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º LLM —Ç–µ—Å—Ç—ã")
        return
    
    strategist = QueryStrategist()
    test_topic = "machine learning research evaluation"
    
    try:
        queries = strategist.generate_queries(test_topic)
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(queries)} –∑–∞–ø—Ä–æ—Å–æ–≤")
        for i, query in enumerate(queries[:3], 1):
            print(f"  {i}. {query}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def test_arxiv_harvester():
    """–¢–µ—Å—Ç —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–µ–π —Å arXiv"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ArXiv Harvester...")
    
    harvester = ArxivHarvester()
    test_query = "machine learning"
    
    try:
        papers = harvester.search_papers(test_query, max_results=3)
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(papers)} —Å—Ç–∞—Ç–µ–π")
        
        if papers:
            paper = papers[0]
            print(f"  –ü—Ä–∏–º–µ—Ä: {paper.title[:50]}...")
            print(f"  –ê–≤—Ç–æ—Ä—ã: {', '.join(paper.authors[:2])}")
            print(f"  –î–∞—Ç–∞: {paper.published_date}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def test_paper_evaluator():
    """–¢–µ—Å—Ç –æ—Ü–µ–Ω–∫–∏ —Å—Ç–∞—Ç–µ–π"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Paper Evaluator...")
    
    api_provider = os.getenv('API_PROVIDER', 'gemini').lower()
    api_key = os.getenv('GEMINI_API_KEY') if api_provider == 'gemini' else os.getenv('OPENAI_API_KEY')
    
    if not api_key:
        print(f"‚ö†Ô∏è API –∫–ª—é—á –¥–ª—è {api_provider} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º LLM —Ç–µ—Å—Ç—ã")
        return True
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç–∞—Ç—å—é
    from modules.ai_research_analyst.models import Paper
    
    test_paper = Paper(
        id="test_id",
        published_date="2024-01-01",
        title="A Survey of Machine Learning Research Evaluation Methods",
        summary="This paper presents a comprehensive survey of methods used to evaluate machine learning research, including quantitative metrics and qualitative assessments.",
        authors=["John Doe", "Jane Smith"]
    )
    
    evaluator = PaperEvaluator()
    test_topic = "machine learning research evaluation"
    
    try:
        ranked_paper = evaluator.evaluate_paper(test_paper, test_topic)
        print(f"‚úÖ –û—Ü–µ–Ω–∫–∞: {ranked_paper.score}")
        print(f"  –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {ranked_paper.justification[:100]}...")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def test_full_pipeline():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞...")
    
    api_provider = os.getenv('API_PROVIDER', 'gemini').lower()
    api_key = os.getenv('GEMINI_API_KEY') if api_provider == 'gemini' else os.getenv('OPENAI_API_KEY')
    
    if not api_key:
        print(f"‚ö†Ô∏è API –∫–ª—é—á –¥–ª—è {api_provider} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç")
        return True
    
    orchestrator = ResearchOrchestrator()
    test_topic = "automated scientific paper evaluation"
    
    try:
        print("üìù –ó–∞–ø—É—Å–∫ –º–∏–Ω–∏-–ø–∞–π–ø–ª–∞–π–Ω–∞ (3 —Å—Ç–∞—Ç—å–∏)...")
        report = orchestrator.run_research_pipeline(test_topic, target_count=3)
        
        print("‚úÖ –ü–∞–π–ø–ª–∞–π–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –î–ª–∏–Ω–∞ –æ—Ç—á–µ—Ç–∞: {len(report)} —Å–∏–º–≤–æ–ª–æ–≤")
        print("üìù –ù–∞—á–∞–ª–æ –æ—Ç—á–µ—Ç–∞:")
        print(report[:300] + "...")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤ (–≤–∫–ª—é—á–∞–µ–º DEBUG –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
    logging.basicConfig(
        level=logging.DEBUG,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ AI Research Analyst")
    print("=" * 50)
    
    tests = [
        test_arxiv_harvester,
        test_query_strategist, 
        test_paper_evaluator,
        test_full_pipeline
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
    
    print("\n" + "=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –∏–ª–∏ –±—ã–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã")
    
    print("\nüí° –°–æ–≤–µ—Ç: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ GEMINI_API_KEY (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è) –∏–ª–∏ OPENAI_API_KEY –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("üîó –ü–æ–ª—É—á–∏—Ç—å Gemini API –∫–ª—é—á: https://makersuite.google.com/app/apikey")


if __name__ == "__main__":
    main() 