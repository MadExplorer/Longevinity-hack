#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞ –í–°–ï–• –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
"""

import asyncio
import json
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é  
sys.path.append(str(Path(__file__).parent.parent.parent))

from airesearcher.arxiv_analyzer.main import ArxivAnalyzer
from airesearcher.arxiv_analyzer.state_manager import StateManager


def show_detailed_analysis(analysis_data):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—å–∏"""
    print(f"üìä –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫–∏ –ø–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    if hasattr(analysis_data, 'prioritization'):
        print(f"\nüéØ –ü–†–ò–û–†–ò–¢–ò–ó–ê–¶–ò–Ø –ò –ì–ï–ù–ï–†–ê–¶–ò–Ø –ò–î–ï–ô:")
        p = analysis_data.prioritization
        print(f"   ‚Ä¢ –ê–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞: {p.algorithm_search.score}/5 - {p.algorithm_search.explanation}")
        print(f"   ‚Ä¢ –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏: {p.relevance_justification.score}/5 - {p.relevance_justification.explanation}")
        print(f"   ‚Ä¢ –í—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤: {p.knowledge_gaps.score}/5 - {p.knowledge_gaps.explanation}")
        print(f"   ‚Ä¢ –ë–∞–ª–∞–Ω—Å –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å/–Ω–æ–≤–∏–∑–Ω–∞: {p.balance_hotness_novelty.score}/5 - {p.balance_hotness_novelty.explanation}")
    
    if hasattr(analysis_data, 'validation'):
        print(f"\nüî¨ –û–¶–ï–ù–ö–ê –ò –í–ê–õ–ò–î–ê–¶–ò–Ø:")
        v = analysis_data.validation
        print(f"   ‚Ä¢ –ë–µ–Ω—á–º–∞—Ä–∫–∏: {v.benchmarks.score}/5 - {v.benchmarks.explanation}")
        print(f"   ‚Ä¢ –ú–µ—Ç—Ä–∏–∫–∏: {v.metrics.score}/5 - {v.metrics.explanation}")
        print(f"   ‚Ä¢ –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –æ—Ü–µ–Ω–∫–∏: {v.evaluation_methodology.score}/5 - {v.evaluation_methodology.explanation}")
        print(f"   ‚Ä¢ –≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: {v.expert_validation.score}/5 - {v.expert_validation.explanation}")
    
    if hasattr(analysis_data, 'architecture'):
        print(f"\nüèóÔ∏è –ê–†–•–ò–¢–ï–ö–¢–£–†–ê –ò –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–ï:")
        a = analysis_data.architecture
        print(f"   ‚Ä¢ –†–æ–ª–∏ –∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã: {a.roles_and_sops.score}/5 - {a.roles_and_sops.explanation}")
        print(f"   ‚Ä¢ –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è: {a.communication.score}/5 - {a.communication.explanation}")
        print(f"   ‚Ä¢ –ü–∞–º—è—Ç—å –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç: {a.memory_context.score}/5 - {a.memory_context.explanation}")
        print(f"   ‚Ä¢ –°–∞–º–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è: {a.self_correction.score}/5 - {a.self_correction.explanation}")
    
    if hasattr(analysis_data, 'knowledge'):
        print(f"\nüß† –†–ê–ë–û–¢–ê –°–û –ó–ù–ê–ù–ò–Ø–ú–ò:")
        k = analysis_data.knowledge
        print(f"   ‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π: {k.extraction.score}/5 - {k.extraction.explanation}")
        print(f"   ‚Ä¢ –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π: {k.representation.score}/5 - {k.representation.explanation}")
        print(f"   ‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤: {k.conflict_resolution.score}/5 - {k.conflict_resolution.explanation}")
    
    if hasattr(analysis_data, 'implementation'):
        print(f"\n‚öôÔ∏è –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø:")
        i = analysis_data.implementation
        print(f"   ‚Ä¢ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏: {i.tools_frameworks.score}/5 - {i.tools_frameworks.explanation}")
        print(f"   ‚Ä¢ –û—Ç–∫—Ä—ã—Ç—ã–π –∫–æ–¥: {i.open_source.score}/5 - {i.open_source.explanation}")
        print(f"   ‚Ä¢ –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç—å: {i.reproducibility.score}/5 - {i.reproducibility.explanation}")
    
    if hasattr(analysis_data, 'key_insights'):
        print(f"\nüí° –ö–õ–Æ–ß–ï–í–´–ï –ò–ù–°–ê–ô–¢–´:")
        for insight in analysis_data.key_insights:
            print(f"   ‚Ä¢ {insight}")
    
    if hasattr(analysis_data, 'relevance_to_task'):
        print(f"\nüîó –†–ï–õ–ï–í–ê–ù–¢–ù–û–°–¢–¨ –ö –ó–ê–î–ê–ß–ï:")
        print(f"   {analysis_data.relevance_to_task}")


async def show_all_papers(limit: int = None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º"""
    
    print("üìö –ü–û–ö–ê–ó –í–°–ï–• –ü–†–û–ê–ù–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–• –°–¢–ê–¢–ï–ô –° –î–ï–¢–ê–õ–¨–ù–´–ú –ê–ù–ê–õ–ò–ó–û–ú")
    print("=" * 80)
    
    analyzer = ArxivAnalyzer(enable_state_tracking=True)
    state_manager = analyzer.state_manager
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
    all_papers = list(state_manager.analyzed_papers.values())
    
    if not all_papers:
        print("‚ùå –ù–µ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑.")
        return
    
    print(f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: {len(all_papers)}")
    print(f"   ‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω –æ—Ü–µ–Ω–æ–∫: {min(p.overall_score for p in all_papers):.3f} - {max(p.overall_score for p in all_papers):.3f}")
    print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {sum(p.overall_score for p in all_papers) / len(all_papers):.3f}")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    sorted_papers = sorted(all_papers, key=lambda x: x.priority_score or x.overall_score, reverse=True)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π –µ—Å–ª–∏ –∑–∞–¥–∞–Ω –ª–∏–º–∏—Ç
    if limit:
        sorted_papers = sorted_papers[:limit]
        print(f"   ‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-{limit} —Å—Ç–∞—Ç–µ–π")
    
    print("\n" + "=" * 80)
    
    for i, paper in enumerate(sorted_papers, 1):
        print(f"\nüìÑ –°–¢–ê–¢–¨–Ø {i}/{len(sorted_papers)}")
        print("=" * 80)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"üè∑Ô∏è  –ù–∞–∑–≤–∞–Ω–∏–µ: {paper.title}")
        print(f"üÜî arXiv ID: {paper.arxiv_id}")
        print(f"üìà –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {paper.overall_score:.3f}")
        print(f"üèÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {paper.priority_score or 'N/A'}")
        print(f"üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {paper.analysis_timestamp}")
        print(f"üè∑Ô∏è  –°–µ—Å—Å–∏—è: {paper.session_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑ state manager
        try:
            full_analysis = state_manager.get_full_analysis(paper.arxiv_id)
            if full_analysis:
                show_detailed_analysis(full_analysis)
            else:
                print("‚ö†Ô∏è  –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞: {e}")
        
        print("\n" + "-" * 80)
        
        # –ü–∞—É–∑–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ç—å–∏
        if not limit and i < len(sorted_papers):
            try:
                input("\nüìñ –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç–∞—Ç—å–∏ (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)...")
            except KeyboardInterrupt:
                print("\n\nüëã –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
    
    print(f"\n‚úÖ –ü–æ–∫–∞–∑–∞–Ω–æ {i} –∏–∑ {len(all_papers)} —Å—Ç–∞—Ç–µ–π")


def show_summary_only():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –≤—Å–µ—Ö —Å—Ç–∞—Ç–µ–π"""
    print("üìö –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê –í–°–ï–• –°–¢–ê–¢–ï–ô")
    print("=" * 80)
    
    analyzer = ArxivAnalyzer(enable_state_tracking=True)
    all_papers = list(analyzer.state_manager.analyzed_papers.values())
    
    if not all_papers:
        print("‚ùå –ù–µ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π")
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    sorted_papers = sorted(all_papers, key=lambda x: x.priority_score or x.overall_score, reverse=True)
    
    print(f"üìä –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: {len(sorted_papers)}\n")
    
    for i, paper in enumerate(sorted_papers, 1):
        priority = paper.priority_score or paper.overall_score
        print(f"{i:2d}. üìà{paper.overall_score:.3f} üèÖ{priority:.3f} | {paper.title[:70]}...")
        print(f"     üÜî {paper.arxiv_id} | üìÖ {paper.analysis_timestamp[:10]} | üè∑Ô∏è {paper.session_id}")
        print()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description="–ü–æ–∫–∞–∑ –≤—Å–µ—Ö –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π")
    parser.add_argument("--summary", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É")
    parser.add_argument("--top", type=int, help="–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ —Ç–æ–ø-N —Å—Ç–∞—Ç–µ–π")
    
    args = parser.parse_args()
    
    if args.summary:
        show_summary_only()
    else:
        asyncio.run(show_all_papers(limit=args.top))


if __name__ == "__main__":
    main() 