#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–¥—É–ª—è –∞–Ω–∞–ª–∏–∑–∞ arXiv —Å—Ç–∞—Ç–µ–π —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

–ó–∞–ø—É—Å–∫:
python demo.py [--quick] [--no-incremental] [--show-progress] [--clear-state] [--api-key YOUR_KEY]
"""

import asyncio
import argparse
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é
sys.path.append(str(Path(__file__).parent.parent.parent))

from airesearcher.arxiv_analyzer.main import ArxivAnalyzer


async def run_quick_demo(incremental: bool = True, custom_output_dir: str = None):
    """–ë—ã—Å—Ç—Ä–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...")
    print("   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: 3 —Å—Ç–∞—Ç—å–∏ –Ω–∞ –∑–∞–ø—Ä–æ—Å, –º–∞–∫—Å–∏–º—É–º 10 —Å—Ç–∞—Ç–µ–π, –±–µ–∑ LLM —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è")
    if custom_output_dir:
        print(f"   üìÇ –í—ã—Ö–æ–¥–Ω–æ–π –∫–∞—Ç–∞–ª–æ–≥: {custom_output_dir}")
    
    analyzer = ArxivAnalyzer(enable_state_tracking=True, custom_output_dir=custom_output_dir)
    
    try:
        results = await analyzer.run_full_analysis(
            max_papers_per_query=3,
            max_total_papers=10,
            use_llm_ranking=False,
            incremental=incremental
        )
        
        analyzer.print_summary(results)
        
        if 'error' not in results and 'message' not in results:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –ø—É—Ç–µ–π —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞
            try:
                from airesearcher.arxiv_analyzer.config import DEMO_QUICK_FILENAME
            except ImportError:
                from config import DEMO_QUICK_FILENAME
                
            filename = await analyzer.save_results(results, DEMO_QUICK_FILENAME)
            print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ã—Å—Ç—Ä–æ–π –¥–µ–º–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def run_full_demo(incremental: bool = True, custom_output_dir: str = None):
    """–ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å LLM —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...")
    print("   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: 8 —Å—Ç–∞—Ç–µ–π –Ω–∞ –∑–∞–ø—Ä–æ—Å, –º–∞–∫—Å–∏–º—É–º 30 —Å—Ç–∞—Ç–µ–π, —Å LLM —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
    if custom_output_dir:
        print(f"   üìÇ –í—ã—Ö–æ–¥–Ω–æ–π –∫–∞—Ç–∞–ª–æ–≥: {custom_output_dir}")
    
    analyzer = ArxivAnalyzer(enable_state_tracking=True, custom_output_dir=custom_output_dir)
    
    try:
        results = await analyzer.run_full_analysis(
            max_papers_per_query=8,
            max_total_papers=30,
            use_llm_ranking=True,
            incremental=incremental
        )
        
        analyzer.print_summary(results)
        
        if 'error' not in results and 'message' not in results:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –ø—É—Ç–µ–π —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞
            try:
                from airesearcher.arxiv_analyzer.config import DEMO_FULL_FILENAME
            except ImportError:
                from config import DEMO_FULL_FILENAME
                
            filename = await analyzer.save_results(results, DEMO_FULL_FILENAME)
            print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª–Ω–æ–π –¥–µ–º–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            print("\nüìà –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            ranking_summary = results.get('ranking_summary', {})
            if ranking_summary:
                print(f"   ‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π: {ranking_summary.get('total', 0)}")
                print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ —Ç–æ–ø-5: {ranking_summary.get('top_5_avg_score', 0):.3f}")
                
                categories = ranking_summary.get('categories_analysis', {})
                print("   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
                for category, score in categories.items():
                    print(f"     - {category}: {score:.2f}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø —Å—Ç–∞—Ç—å–∏ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
            top_papers = analyzer.get_top_papers_all_time(5)
            if top_papers:
                print("\nüèÜ –¢–û–ü-5 –°–¢–ê–¢–ï–ô –ó–ê –í–°–ï –í–†–ï–ú–Ø:")
                for paper in top_papers:
                    print(f"   {paper['rank']}. {paper['title'][:50]}...")
                    print(f"      üìà –û—Ü–µ–Ω–∫–∞: {paper['overall_score']:.3f} | arXiv: {paper['arxiv_id']}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def show_progress(custom_output_dir: str = None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å"""
    analyzer = ArxivAnalyzer(enable_state_tracking=True, custom_output_dir=custom_output_dir)
    analyzer.print_progress()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    show_output_structure(custom_output_dir)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø —Å—Ç–∞—Ç—å–∏
    top_papers = analyzer.get_top_papers_all_time(10)
    if top_papers:
        print(f"\nüèÜ –¢–û–ü-{len(top_papers)} –°–¢–ê–¢–ï–ô –ó–ê –í–°–ï –í–†–ï–ú–Ø:")
        for paper in top_papers:
            print(f"\n{paper['rank']}. {paper['title'][:60]}...")
            print(f"   üìà –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {paper['overall_score']:.3f}")
            print(f"   üèÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {paper['priority_score']:.3f}")
            print(f"   üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {paper['analysis_date'][:10]}")
            print(f"   üè∑Ô∏è  –°–µ—Å—Å–∏—è: {paper['session_id']}")
            print(f"   üîó arXiv: {paper['arxiv_id']}")
    else:
        print("\nüìù –ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π")


def show_output_structure(custom_output_dir: str = None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    try:
        from airesearcher.arxiv_analyzer.config import get_output_paths
    except ImportError:
        from config import get_output_paths
    
    if custom_output_dir:
        paths = get_output_paths(custom_output_dir)
    else:
        paths = get_output_paths()
    
    print("\nüìÇ –°–¢–†–£–ö–¢–£–†–ê –í–´–•–û–î–ù–´–• –§–ê–ô–õ–û–í:")
    for path_name, path in paths.items():
        if path.exists():
            try:
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
                files = list(path.glob("**/*"))
                file_count = len([f for f in files if f.is_file()])
                dir_count = len([f for f in files if f.is_dir()])
                
                print(f"   üìÅ {path_name}: {path}")
                print(f"      üìÑ –§–∞–π–ª–æ–≤: {file_count}, üìÇ –ü–æ–¥–∫–∞—Ç–∞–ª–æ–≥–æ–≤: {dir_count}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã
                recent_files = sorted([f for f in files if f.is_file()], 
                                    key=lambda x: x.stat().st_mtime, reverse=True)[:3]
                
                for file in recent_files:
                    size_mb = file.stat().st_size / (1024 * 1024)
                    print(f"         ‚Ä¢ {file.name} ({size_mb:.2f} MB)")
                        
            except Exception as e:
                print(f"   üìÅ {path_name}: {path} (–æ—à–∏–±–∫–∞: {e})")
        else:
            print(f"   üìÅ {path_name}: {path} (–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)")

def clear_state(custom_output_dir: str = None):
    """–û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
    print("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
    
    analyzer = ArxivAnalyzer(enable_state_tracking=True, custom_output_dir=custom_output_dir)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    progress = analyzer.show_progress()
    if progress.get('total_analyzed_papers', 0) > 0:
        print(f"‚ö†Ô∏è –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ {progress['total_analyzed_papers']} –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π")
        print(f"‚ö†Ô∏è –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ {progress['total_sessions']} —Å–µ—Å—Å–∏–π")
        
        confirm = input("–í—ã —É–≤–µ—Ä–µ–Ω—ã? (yes/no): ")
        if confirm.lower() in ['yes', 'y', '–¥–∞']:
            analyzer.clear_state(confirm=True)
        else:
            print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
    else:
        print("‚ÑπÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ –ø—É—Å—Ç–æ–µ")


def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
    api_key = os.getenv("GEMINI_API_KEY")
    if not api_key:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω GEMINI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–ª—é—á: export GEMINI_API_KEY='your_key'")
        return False
    else:
        print(f"‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {api_key[:10]}...{api_key[-5:]}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ —Å –∑–∞–¥–∞—á–µ–π
    task_file = Path("../../docsforllm/initialtask.md")
    if not task_file.exists():
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–¥–∞—á–∏: {task_file}")
        return False
    else:
        print(f"‚úÖ –§–∞–π–ª —Å –∑–∞–¥–∞—á–µ–π –Ω–∞–π–¥–µ–Ω: {task_file}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    try:
        import openai
        import aiohttp
        import pydantic
        print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except ImportError as e:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {e}")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install -r requirements.txt")
        return False
    
    return True


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è –∞–Ω–∞–ª–∏–∑–∞ arXiv —Å—Ç–∞—Ç–µ–π —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è")
    parser.add_argument("--quick", action="store_true", help="–ë—ã—Å—Ç—Ä–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è (–º–µ–Ω—å—à–µ API –≤—ã–∑–æ–≤–æ–≤)")
    parser.add_argument("--no-incremental", action="store_true", help="–û—Ç–∫–ª—é—á–∏—Ç—å –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º")
    parser.add_argument("--show-progress", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –≤—ã–π—Ç–∏")
    parser.add_argument("--clear-state", action="store_true", help="–û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
    parser.add_argument("--show-structure", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
    parser.add_argument("--output-dir", help="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    parser.add_argument("--api-key", help="Gemini API –∫–ª—é—á (–µ—Å–ª–∏ –Ω–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è)")
    
    args = parser.parse_args()
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ API –∫–ª—é—á–∞ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
    if args.api_key:
        os.environ["GEMINI_API_KEY"] = args.api_key
    
    print("=" * 70)
    print("üß™ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ú–û–î–£–õ–Ø –ê–ù–ê–õ–ò–ó–ê ARXIV –°–¢–ê–¢–ï–ô –° –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï–ú –°–û–°–¢–û–Ø–ù–ò–Ø")
    print("=" * 70)
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    if args.show_progress:
        show_progress(args.output_dir)
        return
    
    if args.show_structure:
        show_output_structure(args.output_dir)
        return
    
    if args.clear_state:
        clear_state(args.output_dir)
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    if not check_requirements():
        print("\n‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
        return
    
    print("\n‚úÖ –í—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã. –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...\n")
    
    incremental = not args.no_incremental
    if incremental:
        print("‚ôªÔ∏è  –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: –≤–∫–ª—é—á–µ–Ω (–ø—Ä–æ–ø—É—Å–∫ —É–∂–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π)")
    else:
        print("üîÑ –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: –æ—Ç–∫–ª—é—á–µ–Ω (–ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Å—Ç–∞—Ç–µ–π)")
    
    # –ó–∞–ø—É—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    if args.quick:
        asyncio.run(run_quick_demo(incremental, args.output_dir))
    else:
        asyncio.run(run_full_demo(incremental, args.output_dir))
    
    print("\n" + "=" * 70)
    print("‚ú® –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüí° –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    print("   python demo.py --show-progress     # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å")
    print("   python demo.py --show-structure    # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤")
    print("   python demo.py --clear-state       # –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
    print("   python demo.py --no-incremental    # –û—Ç–∫–ª—é—á–∏—Ç—å –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º")
    print("   python demo.py --output-dir custom # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–∞—Ç–∞–ª–æ–≥")
    print("=" * 70)


if __name__ == "__main__":
    main() 