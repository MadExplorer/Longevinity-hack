#!/usr/bin/env python3
"""
–¢–µ—Å—Ç structured output –¥–ª—è Gemini API
"""

import asyncio
from openai import OpenAI
from models import SimplePaperAnalysis, FlatPaperAnalysis
from config import GEMINI_API_KEY, GEMINI_BASE_URL, GEMINI_MODEL


async def test_simple_structured_output():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π structured output"""
    print("üß™ –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ structured output —Å Gemini API...")
    
    client = OpenAI(
        api_key=GEMINI_API_KEY,
        base_url=GEMINI_BASE_URL
    )
    
    test_paper_text = """
    –ù–∞–∑–≤–∞–Ω–∏–µ: "Multi-Agent Systems for Scientific Discovery"
    –ê–±—Å—Ç—Ä–∞–∫—Ç: "This paper presents a framework where multiple AI agents collaborate to analyze scientific literature and identify research gaps."
    """
    
    prompt = f"""
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â—É—é –Ω–∞—É—á–Ω—É—é —Å—Ç–∞—Ç—å—é –∏ –æ—Ü–µ–Ω–∏ –µ—ë —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –¥–ª—è –∑–∞–¥–∞—á–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤:
    
    {test_paper_text}
    
    –î–∞–π –æ—Ü–µ–Ω–∫—É –æ—Ç 0.0 –¥–æ 1.0 –∏ –≤—ã–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã.
    """
    
    try:
        response = client.beta.chat.completions.parse(
            model=GEMINI_MODEL,
            temperature=0.1,
            messages=[
                {"role": "user", "content": prompt}
            ],
            response_format=SimplePaperAnalysis
        )
        
        result = response.choices[0].message.parsed
        
        print("‚úÖ –ü—Ä–æ—Å—Ç–æ–π structured output —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print(f"üìÑ –ù–∞–∑–≤–∞–Ω–∏–µ: {result.title}")
        print(f"üìä –û—Ü–µ–Ω–∫–∞: {result.overall_score}")
        print(f"üí° –ò–Ω—Å–∞–π—Ç—ã: {result.key_insights}")
        print(f"üéØ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {result.relevance_explanation}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ structured output: {e}")
        return False


async def test_flat_analysis():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç FlatPaperAnalysis –º–æ–¥–µ–ª—å"""
    print("\nüß™ –¢–µ—Å—Ç FlatPaperAnalysis —Å –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ –∏–∑ —á–µ–∫-–ª–∏—Å—Ç–∞...")
    
    client = OpenAI(
        api_key=GEMINI_API_KEY,
        base_url=GEMINI_BASE_URL
    )
    
    test_paper_text = """
    –ù–∞–∑–≤–∞–Ω–∏–µ: "Multi-Agent Systems for Scientific Discovery"
    –ê–±—Å—Ç—Ä–∞–∫—Ç: "This paper presents a framework where multiple AI agents collaborate to analyze scientific literature and identify research gaps using LLM-based reasoning."
    """
    
    prompt = f"""
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â—É—é –Ω–∞—É—á–Ω—É—é —Å—Ç–∞—Ç—å—é –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∏–∑ —á–µ–∫-–ª–∏—Å—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤:
    
    {test_paper_text}
    
    –û—Ü–µ–Ω–∏ —Å—Ç–∞—Ç—å—é –ø–æ –≤—Å–µ–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∏–∑ —á–µ–∫-–ª–∏—Å—Ç–∞ –æ—Ç 1 –¥–æ 5, –≥–¥–µ:
    1 - –Ω–µ —Ä–∞—Å–∫—Ä—ã—Ç–æ
    2 - –ø–ª–æ—Ö–æ —Ä–∞—Å–∫—Ä—ã—Ç–æ  
    3 - —á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞—Å–∫—Ä—ã—Ç–æ
    4 - —Ö–æ—Ä–æ—à–æ —Ä–∞—Å–∫—Ä—ã—Ç–æ
    5 - –æ—Ç–ª–∏—á–Ω–æ —Ä–∞—Å–∫—Ä—ã—Ç–æ
    
    –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –æ—Ç 0.0 –¥–æ 1.0.
    """
    
    try:
        response = client.beta.chat.completions.parse(
            model=GEMINI_MODEL,
            temperature=0.1,
            messages=[
                {"role": "user", "content": prompt}
            ],
            response_format=FlatPaperAnalysis
        )
        
        result = response.choices[0].message.parsed
        
        print("‚úÖ FlatPaperAnalysis —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print(f"üìä –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {result.overall_score}")
        print(f"üí° –ò–Ω—Å–∞–π—Ç—ã: {result.key_insights}")
        print(f"üéØ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {result.relevance_to_task}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
        print(f"üîç –ê–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞: {result.algorithm_search_score}/5")
        print(f"üìà –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏: {result.relevance_justification_score}/5")
        print(f"üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∞–≥–µ–Ω—Ç–æ–≤: {result.roles_and_sops_score}/5")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ FlatPaperAnalysis: {e}")
        return False


async def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    print("=" * 50)
    print("üß™ –¢–ï–°–¢–´ STRUCTURED OUTPUT")
    print("=" * 50)
    
    simple_ok = await test_simple_structured_output()
    flat_ok = await test_flat_analysis()
    
    print("\n" + "=" * 50)
    if simple_ok and flat_ok:
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
    print("=" * 50)


if __name__ == "__main__":
    asyncio.run(main()) 