#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç:
1. –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ç–∞–ª–æ–≥–æ–≤
2. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –ø—É—Ç—è–º–∏
3. –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
4. –†–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
"""

import asyncio
import json
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é
sys.path.append(str(Path(__file__).parent.parent.parent))

from airesearcher.arxiv_analyzer.config import (
    get_output_paths, create_output_structure,
    DEMO_QUICK_FILENAME, DEMO_FULL_FILENAME
)


def test_output_structure():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ç–∞–ª–æ–≥–æ–≤"""
    print("üß™ –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ç–∞–ª–æ–≥–æ–≤")
    
    # –¢–µ—Å—Ç —Å –±–∞–∑–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    print("\n   üìÅ –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:")
    paths = get_output_paths()
    created_paths = create_output_structure()
    
    for name, path in created_paths.items():
        exists = "‚úÖ" if path.exists() else "‚ùå"
        print(f"      {exists} {name}: {path}")
    
    # –¢–µ—Å—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∫–∞—Ç–∞–ª–æ–≥–æ–º
    print("\n   üìÅ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:")
    custom_paths = get_output_paths("test_output", use_date_structure=False)
    custom_created = create_output_structure("test_output")
    
    for name, path in custom_created.items():
        exists = "‚úÖ" if path.exists() else "‚ùå"
        print(f"      {exists} {name}: {path}")
    
    return created_paths, custom_created


def test_path_configs():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—É—Ç–µ–π"""
    print("\nüß™ –¢–µ—Å—Ç 2: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—É—Ç–µ–π")
    
    # –° –¥–∞—Ç–∞–º–∏
    paths_with_dates = get_output_paths(use_date_structure=True)
    print("\n   üìÖ –° —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –ø–æ –¥–∞—Ç–∞–º:")
    for name, path in paths_with_dates.items():
        print(f"      ‚Ä¢ {name}: {path}")
    
    # –ë–µ–∑ –¥–∞—Ç
    paths_no_dates = get_output_paths(use_date_structure=False)
    print("\n   üìÖ –ë–µ–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ –¥–∞—Ç–∞–º:")
    for name, path in paths_no_dates.items():
        print(f"      ‚Ä¢ {name}: {path}")
    
    return paths_with_dates, paths_no_dates


async def test_save_functionality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
    print("\nüß™ –¢–µ—Å—Ç 3: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
    
    from airesearcher.arxiv_analyzer.main import ArxivAnalyzer
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_results = {
        "timestamp": "2025-01-21T12:00:00",
        "test": True,
        "statistics": {
            "papers_analyzed": 5,
            "duration": 120.5
        },
        "top_papers": [
            {"title": "Test Paper 1", "score": 0.95},
            {"title": "Test Paper 2", "score": 0.87}
        ],
        "full_results": {"detailed": "data", "size": "large"}
    }
    
    # –¢–µ—Å—Ç 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    print("\n   üíæ –¢–µ—Å—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:")
    analyzer = ArxivAnalyzer(enable_state_tracking=False)
    saved_path = await analyzer.save_results(test_results, "test_standard.json")
    if saved_path:
        print(f"   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {saved_path}")
        file_size = Path(saved_path).stat().st_size
        print(f"   üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
    
    # –¢–µ—Å—Ç 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∫–∞—Ç–∞–ª–æ–≥–æ–º
    print("\n   üíæ –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–∞—Ç–∞–ª–æ–≥:")
    analyzer_custom = ArxivAnalyzer(enable_state_tracking=False, custom_output_dir="test_custom")
    saved_path_custom = await analyzer_custom.save_results(test_results, "test_custom.json")
    if saved_path_custom:
        print(f"   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {saved_path_custom}")
    
    # –¢–µ—Å—Ç 3: –î–µ–º–æ —Ñ–∞–π–ª—ã
    print("\n   üíæ –¢–µ—Å—Ç –¥–µ–º–æ —Ñ–∞–π–ª–æ–≤:")
    quick_path = await analyzer.save_results(test_results, DEMO_QUICK_FILENAME)
    full_path = await analyzer.save_results(test_results, DEMO_FULL_FILENAME)
    
    if quick_path:
        print(f"   ‚úÖ Quick demo: {quick_path}")
    if full_path:
        print(f"   ‚úÖ Full demo: {full_path}")
    
    return [saved_path, saved_path_custom, quick_path, full_path]


def test_backup_functionality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\nüß™ –¢–µ—Å—Ç 4: –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    from airesearcher.arxiv_analyzer.main import ArxivAnalyzer
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = ArxivAnalyzer(enable_state_tracking=False)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    test_file = Path("output/reports") / "test_backup.json"
    test_file.parent.mkdir(parents=True, exist_ok=True)
    
    test_data = {"version": 1, "data": "original"}
    with open(test_file, 'w') as f:
        json.dump(test_data, f)
    
    print(f"   üìÑ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {test_file}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    if test_file.exists():
        analyzer._create_backup(test_file, max_backups=3)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        backup_dir = test_file.parent / "backups"
        if backup_dir.exists():
            backups = list(backup_dir.glob("test_backup_backup_*.json"))
            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {len(backups)}")
            for backup in backups:
                print(f"      üìã {backup.name}")
        else:
            print("   ‚ùå –ö–∞—Ç–∞–ª–æ–≥ backups –Ω–µ —Å–æ–∑–¥–∞–Ω")
    
    return test_file


def test_config_loading():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\nüß™ –¢–µ—Å—Ç 5: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    
    try:
        from airesearcher.arxiv_analyzer.config import (
            OUTPUT_BASE_DIR, REPORTS_DIR, STATE_DIR,
            REPORT_FILENAME_TEMPLATE, USE_DATE_STRUCTURE,
            SAVE_FULL_RESULTS, BACKUP_OLD_REPORTS
        )
        
        print("   ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:")
        print(f"      üìÅ –ë–∞–∑–æ–≤—ã–π –∫–∞—Ç–∞–ª–æ–≥: {OUTPUT_BASE_DIR}")
        print(f"      üìÑ –ö–∞—Ç–∞–ª–æ–≥ –æ—Ç—á–µ—Ç–æ–≤: {REPORTS_DIR}")
        print(f"      üíæ –ö–∞—Ç–∞–ª–æ–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {STATE_DIR}")
        print(f"      üìù –®–∞–±–ª–æ–Ω —Ñ–∞–π–ª–∞: {REPORT_FILENAME_TEMPLATE}")
        print(f"      üìÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ –¥–∞—Ç–∞–º: {USE_DATE_STRUCTURE}")
        print(f"      üíæ –ü–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {SAVE_FULL_RESULTS}")
        print(f"      üîÑ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ: {BACKUP_OLD_REPORTS}")
        
        return True
        
    except ImportError as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False


async def run_all_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –£–õ–£–ß–®–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ –°–û–•–†–ê–ù–ï–ù–ò–Ø")
    print("=" * 60)
    
    results = {}
    
    # –¢–µ—Å—Ç 1: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–æ–≤
    try:
        results['structure'] = test_output_structure()
        print("   ‚úÖ –¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –ø—Ä–æ–π–¥–µ–Ω")
    except Exception as e:
        print(f"   ‚ùå –¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ç–∞–ª–æ–≥–æ–≤: {e}")
        results['structure'] = None
    
    # –¢–µ—Å—Ç 2: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—É—Ç–µ–π
    try:
        results['paths'] = test_path_configs()
        print("   ‚úÖ –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –ø—É—Ç–µ–π –ø—Ä–æ–π–¥–µ–Ω")
    except Exception as e:
        print(f"   ‚ùå –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –ø—É—Ç–µ–π: {e}")
        results['paths'] = None
    
    # –¢–µ—Å—Ç 3: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    try:
        results['save'] = await test_save_functionality()
        print("   ‚úÖ –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω")
    except Exception as e:
        print(f"   ‚ùå –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        results['save'] = None
    
    # –¢–µ—Å—Ç 4: –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
    try:
        results['backup'] = test_backup_functionality()
        print("   ‚úÖ –¢–µ—Å—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω")
    except Exception as e:
        print(f"   ‚ùå –¢–µ—Å—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        results['backup'] = None
    
    # –¢–µ—Å—Ç 5: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    try:
        results['config'] = test_config_loading()
        print("   ‚úÖ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω")
    except Exception as e:
        print(f"   ‚ùå –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        results['config'] = False
    
    print("\n" + "=" * 60)
    print("üìä –°–í–û–î–ö–ê –¢–ï–°–¢–û–í:")
    
    passed = sum(1 for v in results.values() if v is not None and v != False)
    total = len(results)
    
    print(f"   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    
    if passed == total:
        print("   üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("   ‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
    
    return results


def cleanup_test_files():
    """–û—á–∏—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã"""
    print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    
    import shutil
    
    test_dirs = ["output", "test_output", "test_custom"]
    
    for test_dir in test_dirs:
        test_path = Path(test_dir)
        if test_path.exists():
            try:
                shutil.rmtree(test_path)
                print(f"   üóëÔ∏è –£–¥–∞–ª–µ–Ω: {test_path}")
            except Exception as e:
                print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {test_path}: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description="–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
    parser.add_argument("--cleanup", action="store_true", help="–û—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤")
    parser.add_argument("--no-cleanup", action="store_true", help="–ù–µ –æ—á–∏—â–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã")
    
    args = parser.parse_args()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    asyncio.run(run_all_tests())
    
    # –û—á–∏—Å—Ç–∫–∞
    if args.cleanup or (not args.no_cleanup):
        cleanup_test_files()
    
    print("\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    main() 